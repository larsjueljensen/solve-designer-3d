






function MovingObject.DoubleTap()


local nOpacity=0


local hUser=application.getCurrentUser()
local hToolWnd=hud.getComponent(hUser,"HUD_sidemenu.Tools")
local hRoomEdit=hud.getComponent(hUser,"HUD_sidemenu.RoomEditor")
local hObjectEdit=hud.getComponent(hUser,"HUD_sidemenu.ObjectEditor")
local hSlider=hud.getComponent(hUser,"Slider")

log.message("DoubleTap last object: ",this.hLastObject())
this.hSelectedObject(this.hLastObject())
log.message("DoubleTap selected object : ",this.hSelectedObject())

if this.hSelectedObject()~=nil then
local o=shape.getMeshOpacity(this.hSelectedObject())
this.nObjectOpacity(o)




end







local hLast=this.hLastObject()
local hPrevious=this.hPreviousObject()
local hSelected=this.hSelectedObject()

this.hRoomObject(hLast)


if hLast~=nil then
local hMainNode=object.getParent(hLast)

else
end






log.message("Setting target object value: ",hSelected)


if hPrevious then




log.message("Got handle to previous object: ",hPrevious)

else

log.message("First selection")

end






log.message("selection: ",this.hLastObject())
if this.hLastObject()~=nil then
local nTypeIsRoom=sensor.getCategoryBitAt(this.hUnderCursorObject(),0,1)
local nTypeIsWall=sensor.getCategoryBitAt(this.hUnderCursorObject(),0,2)


if nTypeIsRoom==true then




log.message("Room editor selected")
hud.setComponentVisible(hRoomEdit,true)
hud.setComponentVisible(hObjectEdit,false)

user.sendEvent(hUser,"aspmenu_AI","onRefresh")


if nTypeIsWall==true then

user.sendEvent(hUser,"ASPMain","onAttributeSelected",2)

this.HighlightSelection()



else

user.sendEvent(hUser,"ASPMain","onAttributeSelected",3)

end

this.hSelectedObject(this.hLastObject())




else




this.hSelectedObject(this.hLastObject())



log.message("Object editor selected for mod: ",this.hSelectedObject())






this.HighLightObject()

log.message("Highlight selected for mod: ",this.hSelectedObject())

end



else

end


this.hLastObject(nil)




local hLast=this.hLastObject()
local hPrevious=this.hPreviousObject()
local hSelected=this.hSelectedObject()

log.message("hLast = ",hLast)
log.message("hPrevious = ",hPrevious)
log.message("hSelected = ",hSelected)

user.setAIVariable(hUser,"ASPMain","hCurrentObject",this.hSelectedObject())


local hPrevious=this.hSelectedObject()
this.hPreviousObject(hPrevious)
this.UpdateStatus(this.hSelectedObject(),hUser)
this.UpdateLock()

end
